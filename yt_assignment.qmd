---
title: "Youtube Stats Analysis"
format: html
editor: visual
execute: 
  echo: false
---

***Lets start With the Structure of our dataset:***

These are the structure's of the 3 dataset's we have taken :

```{r}
#| label: Graph of the process made by Mermaid
# Load necessary packages
suppressPackageStartupMessages(library(dplyr))
library(dplyr)

# Load datasets
global_youtube <- read.csv("global_youtube_statistics.csv")
top_artists <- read.csv("topyoutube.csv")
top_videos <- read.csv("Top 14 Ever Most Viewed YouTube Videos.csv")

# Check the structure of datasets
str(global_youtube)
str(top_artists)
str(top_videos)

# Merge datasets
# Assuming there are common variables to merge on, such as Youtuber/Artist/Channel Name
merged_data <- merge(global_youtube, top_artists, by.x = "Youtuber", by.y = "Artist", all = TRUE)

merged_data <- merge(merged_data, top_videos, by.x = "Youtuber", by.y = "Description", all = TRUE)


# Creating a Mermaid diagram
mermaid_diagram <- "
graph LR
    A[global_youtube] --> C[merged_data]
    B[top_artists] --> C
    D[top_videos] --> C
"

# Render the Mermaid diagram
DiagrammeR::mermaid(mermaid_diagram)



```

The following datasets have been merged into 1 dataset The code loads the dplyr library and loads three datasets: global_youtube, top_artists, and top_videos. The str() function inspects the structure of each dataset. Data is merged using functions like left_join(), right_join(), inner_join(), or full_join(), depending on the desired join type. Merging other datasets using join functions and common variables/columns is also possible.

**Scatter Plot**

```{r}
# Load necessary packages
library(dplyr)
library(ggplot2)

# Assuming merged_data is already available
# If not, load or prepare your merged_data dataframe
merged_data$subscribers <- merged_data$subscribers + 1
merged_data$video.views <- merged_data$video.views + 1

# Remove rows with NA or infinite values
merged_data <- merged_data %>% filter(is.finite(subscribers), is.finite(video.views))

# Create visualizations with scaled axes
ggplot(merged_data, aes(x = subscribers, y = video.views)) +
  geom_point(color = "darkblue") +
  scale_x_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Subscribers vs Total Views",
       x = "Subscribers (Log Scale)", y = "Total Views (Log Scale)") +
  theme_minimal()

# Save the merged dataset if needed
write.csv(merged_data, "merged_data.csv", row.names = FALSE)



```

The scatter plot demonstrates a positive association between the number of subscribers and total views, with higher subscriber counts resulting in more views, implying that channels with more subscribers likely to have more views.



**Geographical analysis**

```{r}

suppressWarnings(library(leaflet))
library(leaflet)
# Filter out rows with missing latitude or longitude
geo_data <- merged_data[!is.na(merged_data$Latitude) & !is.na(merged_data$Longitude), ]

# Clean up the Youtuber names to ensure valid UTF-8 characters
geo_data$Youtuber <- iconv(geo_data$Youtuber, from = "UTF-8", to = "ASCII//TRANSLIT")

# Create Leaflet map
map <- leaflet(geo_data) %>%
  addTiles() %>%
  addMarkers(~Longitude, ~Latitude, popup = ~Youtuber)

# Display the map
map

```



**Bar Chart**

```{r}
suppressWarnings(suppressPackageStartupMessages(library(plotly)))
library(plotly)
color_scheme <- "blue"  # Replace with your actual color scheme
# Assuming you have a data frame called "merged_data" with columns "category" and "uploads"
plot_ly(merged_data, x = ~category, y = ~uploads, type = "bar", marker = list(color = color_scheme), height = 400, width = 600) %>%
  layout(title = "Number of Uploads per Category",
         xaxis = list(title = "Category"),
         yaxis = list(title = "Number of Uploads"))

```

```{r}
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")

# Load required packages
library(ggplot2)
library(plotly)

# Assuming your data frame is named 'merged_data'

# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]

# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Top 10 YouTubers by Views",
       x = "YouTuber",
       y = "Views") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Print the plot directly
print(bar_plot)
```


```{r}
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "blue")  # Example color scheme, replace with your actual color scheme

# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
  layout(title = "Distribution of Total Views by Category",
         xaxis = list(title = "Category"),
         yaxis = list(title = "Total Views"))


```



**Ok**

```{r}
# Load necessary libraries
suppressWarnings(suppressPackageStartupMessages(library(tidyr)))
suppressWarnings(suppressPackageStartupMessages(library(tm)))
library(dplyr)
library(tidyr)
library(ggplot2)
library(tm)
library(stringi)

# Load the dataset
merged_data <- read.csv("merged_data.csv")

# Drop unnecessary columns
merged_data <- merged_data %>%
  select(-c(Total.Views, X100M, Avg, Video.Name, Channel_Name, Views, Likes, Uploading.Date, Duration))

# Quantitative Analysis (Regression Model)
# Build a regression model to predict video views
model <- lm(video.views ~ subscribers + uploads + Population + Unemployment.rate + Urban_population, data = merged_data)

# Summary of the regression model
summary(model)

# Visualize the regression model
plot(model)

# Qualitative Analysis (Text Mining / Thematic Analysis)
# Combine video titles into a single text corpus
corpus <- Corpus(VectorSource(merged_data$Title))

# Convert the text data to "UTF-8" encoding
suppressWarnings({
corpus <- tm_map(corpus, content_transformer(function(x) iconv(x, to = "UTF-8")))
})

# Preprocess the text data
suppressWarnings({
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
})

# Create a document-term matrix
dtm <- DocumentTermMatrix(corpus)

# Find the most frequent terms
term_freq <- colSums(as.matrix(dtm))
top_terms <- sort(term_freq, decreasing = TRUE)[1:10]

# Display the top terms
print(top_terms)

# Visualize the top terms
barplot(top_terms, main = "Top Terms", ylab = "Frequency", las = 2, col = "lightblue")


```


