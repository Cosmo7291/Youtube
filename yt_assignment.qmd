---
title: "Youtube Statsistics 2023 Analysis"
format: html
editor: visual
execute: 
  echo: false
  warning: false
---

***Lets start With the Structure of our Dataset:***

These are the structure's of the 3 dataset's we have taken :

```{r}
#| label: Graph of the process made by Mermaid
# Load necessary packages
suppressPackageStartupMessages(library(dplyr))
library(dplyr)

# Load datasets
global_youtube <- read.csv("global_youtube_statistics.csv")
top_artists <- read.csv("topyoutube.csv")
top_videos <- read.csv("Top 14 Ever Most Viewed YouTube Videos.csv")

# Check the structure of datasets
str(global_youtube)
str(top_artists)
str(top_videos)

# Merge datasets
# Assuming there are common variables to merge on, such as Youtuber/Artist/Channel Name
merged_data <- merge(global_youtube, top_artists, by.x = "Youtuber", by.y = "Artist", all = TRUE)

merged_data <- merge(merged_data, top_videos, by.x = "Youtuber", by.y = "Description", all = TRUE)


# Creating a Mermaid diagram
mermaid_diagram <- "
graph LR
    A[global_youtube] --> C[merged_data]
    B[top_artists] --> C
    D[top_videos] --> C
"

# Render the Mermaid diagram
DiagrammeR::mermaid(mermaid_diagram)



```

The code loads the dplyr package for data manipulation and transformation, loads three CSV files, inspects their structure using str(), and merges them using common variables. The merged data is stored in the merged_data variable, and the code then merges the datasets with top_videos.

#### **Scatter Plot**

```{r}
# Load necessary packages
library(dplyr)
library(ggplot2)

# Assuming merged_data is already available
# If not, load or prepare your merged_data dataframe
merged_data$subscribers <- merged_data$subscribers + 1
merged_data$video.views <- merged_data$video.views + 1

# Remove rows with NA or infinite values
merged_data <- merged_data %>% filter(is.finite(subscribers), is.finite(video.views))

# Create visualizations with scaled axes
ggplot(merged_data, aes(x = subscribers, y = video.views)) +
  geom_point(color = "darkblue") +
  scale_x_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Subscribers vs Total Views",
       x = "Subscribers (Log Scale)", y = "Total Views (Log Scale)") +
  theme_minimal()

# Save the merged dataset if needed
write.csv(merged_data, "merged_data.csv", row.names = FALSE)



```

The scatter plot demonstrates a positive association between the number of subscribers and total views, with higher subscriber counts resulting in more views, implying that channels with more subscribers likely to have more views.

#### **Geographical analysis**

```{r}

suppressWarnings(library(leaflet))
library(leaflet)
# Filter out rows with missing latitude or longitude
geo_data <- merged_data[!is.na(merged_data$Latitude) & !is.na(merged_data$Longitude), ]

# Clean up the Youtuber names to ensure valid UTF-8 characters
geo_data$Youtuber <- iconv(geo_data$Youtuber, from = "UTF-8", to = "ASCII//TRANSLIT")

# Create Leaflet map
map <- leaflet(geo_data) %>%
  addTiles() %>%
  addMarkers(~Longitude, ~Latitude, popup = ~Youtuber)

# Display the map
map

```

The following map shows the exact location of various Youtubes present throughout the globe it uses the longitude and latitude coloums from the dataset.

#### **Number of Uploads per Category**

```{r}
suppressWarnings(suppressPackageStartupMessages(library(plotly)))
library(plotly)
color_scheme <- "blue"  # Replace with your actual color scheme
# Assuming you have a data frame called "merged_data" with columns "category" and "uploads"
plot_ly(merged_data, x = ~category, y = ~uploads, type = "bar", marker = list(color = color_scheme), height = 400, width = 600) %>%
  layout(title = "Number of Uploads per Category",
         xaxis = list(title = "Category"),
         yaxis = list(title = "Number of Uploads"))

```

The following graphs shows that the top contributors to the platform in terms of uploads are the Entertainment and News & Politics indusrty.

#### **Top 10 Youtubers**

```{r}
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")

# Load required packages
library(ggplot2)
library(plotly)

# Assuming your data frame is named 'merged_data'

# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]

bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
  geom_bar(stat = "identity", fill = "darkcyan") +
  geom_text(aes(label = video.views), vjust = -0.3) +  # This line adds the labels
  labs(title = "Top 10 YouTubers by Views",
       x = "YouTuber",
       y = "Views (in millions)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(labels = function(x) as.integer(round(x / 1e6)))  # This line converts the y-axis values to millions, rounds them to the nearest whole number, and then converts them to integers

# Print the plot directly
print(bar_plot)

```

The following graph shows the top 10 youtubers on the basis of number of Views.

### **Categorical Distribution**

```{r}
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "purple")  

# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
  layout(title = "Distribution of Total Views by Category",
         xaxis = list(title = "Category"),
         yaxis = list(title = "Total Views"))

```

the box plot graph titled “Categorical Distribution” is illustrating the distribution of total views (in 100M) among four different YouTube video categories: `Entertainment`, `Film & Animation`, `Music`, and `People & Blogs`.

Here’s a little analysis:

**Entertainment:** This category has a significantly wide range of total views, showing a substantial variety in the popularity of entertainment content. The median value looks to be approximately 20M views, implying that half of the films in this category have views fewer than this quantity.

**Film & Animation:** This category similarly exhibits a wide range of views, but it includes numerous outliers that greatly exceed the upper quartile, showing certain videos in this category have unusually high views.

**Music:** The music category has the highest median views among all genres, showing that music videos tend to be more popular on YouTube. However, there are also some outliers indicating some music videos have views considerably beyond the average range.

**People & Blogs**: This category has the narrowest range of views, showing that the viewing of these videos is pretty consistent. The median is lower than the other categories, indicating that these films tend to receive less views.

### **Monthly Highest & Lowest Earnings**

```{r}
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'Rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank and select the top 5
merged_data <- merged_data[order(merged_data$rank),]
merged_data <- head(merged_data, 5)
# Convert earnings to a more readable format (in millions)
merged_data$Highest_monthly_earnings <- merged_data$highest_monthly_earnings / 1e6
merged_data$Lowest_monthly_earnings <- merged_data$lowest_monthly_earnings / 1e6
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings, 'M')) %>%
  add_trace(y = ~lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', lowest_monthly_earnings, 'M')) %>%
  layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings (in Millions)',
         xaxis = list(title = 'Rank'),
         yaxis = list(title = 'Earnings (in Millions)', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
  highlight(on = "plotly_hover", off = "plotly_doubleclick")
```

The following graphs shows the highest and lowest amout of earning by the top 5 YouTubers on the bases of there ranks highest is made by T-series rank 1 that generates its highest 9million dollars in a month and lowest around 5 million approx. 

### **Regression Model**

***Output:***

```{r}
# Load necessary libraries
suppressWarnings(suppressPackageStartupMessages(library(tidyr)))
suppressWarnings(suppressPackageStartupMessages(library(tm)))
library(dplyr)
library(tidyr)
library(ggplot2)
library(tm)
library(stringi)

# Load the dataset
merged_data <- read.csv("merged_data.csv")

# Drop unnecessary columns
merged_data <- merged_data %>%
  select(-c(Total.Views, X100M, Avg, Video.Name, Channel_Name, Views, Likes, Uploading.Date, Duration))

# Quantitative Analysis (Regression Model)
# Build a regression model to predict video views
model <- lm(video.views ~ subscribers + uploads + Population + Unemployment.rate + Urban_population, data = merged_data)

# Summary of the regression model
summary(model)



```

## **Results**

***Quantitative Analysis (Regression Model)*****:** The regression model is predicting `video.views` based on subscribers, uploads, Population, Unemployment.rate, and Urban_population.

***Intercept:*** The intercept (base value when all predictors are 0) is -5.041e+09. However, an intercept in this context might not have a meaningful interpretation since the predictors cannot all be zero in reality.

***Subscribers:*** For each additional subscriber, the video views increase by approximately 645.3, holding all other variables constant. This variable is highly significant with a p-value less than 2e-16.

***Uploads*****:** For each additional upload, the video views increase by approximately 42750, holding all other variables constant. This variable is also significant with a p-value of 9.00e-07.

***Population:*** The coefficient for population is not statistically significant at the common 0.05 level (p-value = 0.1684), suggesting that population might not have a significant effect on video views, given the other variables in the model.

**Unemployment Rate:** The coefficient for the unemployment rate is marginally significant (p-value = 0.0706), suggesting that the unemployment rate might have an effect on video views, but this effect is not as strong as the effects of subscribers and uploads.

**Urban Population:** The coefficient for urban population is not statistically significant at the common 0.05 level (p-value = 0.1813), suggesting that the urban population might not have a significant effect on video views, given the other variables in the model.

**R-squared:** The R-squared value is 0.6308, which means that approximately 63.08% of the variation in video views can be explained by the model. The adjusted R-squared value, which adjusts for the number of predictors in the model, is slightly lower at 0.6287.

**Conclusion**

The regression model suggests that the number of subscribers and uploads have a significant positive effect on video views. The effects of population, unemployment rate, and urban population are not as clear, and further analysis might be needed to understand their impacts. The model explains about 63.08% of the variation in video views, which indicates a fairly good fit to the data. However, there might be other factors not included in the model that could explain the remaining variation in video views.

**Visualizing the Model**

```{r}
# Visualize the regression model
plot(model)
```

### **Qualitative Analysis**

***Output:***

```{r}
# Qualitative Analysis (Text Mining / Thematic Analysis)
# Combine video titles into a single text corpus
corpus <- Corpus(VectorSource(merged_data$Title))

# Convert the text data to "UTF-8" encoding
suppressWarnings({
corpus <- tm_map(corpus, content_transformer(function(x) iconv(x, to = "UTF-8")))
})

# Preprocess the text data
suppressWarnings({
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
})

# Create a document-term matrix
dtm <- DocumentTermMatrix(corpus)

# Find the most frequent terms
term_freq <- colSums(as.matrix(dtm))
top_terms <- sort(term_freq, decreasing = TRUE)[1:10]

# Display the top terms
print(top_terms)



```

**Visualizing the Model**

```{r}

# Visualize the top terms
barplot(top_terms, main = "Top Terms", ylab = "Frequency", las = 2, col = "orange")
```

## **Results**

The dataset shows a lopsided focus on films targeting children and music fans, with the most often appearing phrases being "kids," "music," and "songs." Content developers and marketers should try combining these common terms into video titles for better engagement.
