---
title: "Youtube Stats Assignment"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

```{r}
#| label: load-packages
#| include: false

library(ggplot2)

```

New code

```{r}
# Load necessary packages
library(dplyr)

# Load necessary libraries
library(dplyr)

# Load datasets
global_youtube <- read.csv("global_youtube_statistics.csv")
top_artists <- read.csv("topyoutube.csv")
top_videos <- read.csv("Top 14 Ever Most Viewed YouTube Videos.csv")

# Check the structure of datasets
str(global_youtube)
str(top_artists)
str(top_videos)

# Merge datasets
# Assuming there are common variables to merge on, such as Youtuber/Artist/Channel Name
merged_data <- merge(global_youtube, top_artists, by.x = "Youtuber", by.y = "Artist", all = TRUE)

merged_data <- merge(merged_data, top_videos, by.x = "Youtuber", by.y = "Description", all = TRUE)

# Check the structure of merged dataset
str(merged_data)

# Perform exploratory data analysis
# For example, you can calculate summary statistics
summary(merged_data)

# Create visualizations
library(ggplot2)
ggplot(merged_data, aes(x = subscribers, y = video.views)) +
  geom_point(color = "darkblue") +
  labs(title = "Subscribers vs Total Views",
       x = "Subscribers", y = "Total Views") +
  theme_minimal()
# Additional analysis based on the specific context and questions of interest

# Save the merged dataset
write.csv(merged_data, "merged_data.csv", row.names = FALSE)


```

You can add options to executable code like this

\`\`\`{# Load necessary libraries} library(dplyr) library(ggplot2)

```{r}
ggplot(merged_data, aes(x = category)) + geom_bar(fill = "skyblue", color = "black") + labs(title = "Number of Uploads per Category", x = "Category", y = "Number of Uploads") + theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

![](http://127.0.0.1:30473/graphics/2d695f50-e94a-4a30-8a18-f9382fa771e2.png)

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
library(leaflet)

# Filter out rows with missing latitude or longitude
geo_data <- merged_data[!is.na(merged_data$Latitude) & !is.na(merged_data$Longitude), ]

# Clean up the Youtuber names to ensure valid UTF-8 characters
geo_data$Youtuber <- iconv(geo_data$Youtuber, from = "UTF-8", to = "ASCII//TRANSLIT")

# Create Leaflet map
map <- leaflet(geo_data) %>%
  addTiles() %>%
  addMarkers(~Longitude, ~Latitude, popup = ~Youtuber)

# Display the map
map

```

```{r}
library(plotly)
color_scheme <- "blue"  # Replace with your actual color scheme
# Assuming you have a data frame called "merged_data" with columns "category" and "uploads"
plot_ly(merged_data, x = ~category, y = ~uploads, type = "bar", marker = list(color = color_scheme), height = 400, width = 600) %>%
  layout(title = "Number of Uploads per Category",
         xaxis = list(title = "Category"),
         yaxis = list(title = "Number of Uploads"))

```

```{r}
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "blue")  # Example color scheme, replace with your actual color scheme

# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
  layout(title = "Distribution of Total Views by Category",
         xaxis = list(title = "Category"),
         yaxis = list(title = "Total Views"))


```

```{r}

# Interactive line plot: Trend of subscribers over time
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
  abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
  match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}

# Check unique values in the month column
unique_values <- unique(merged_data$month)
print(paste("Unique values in the month column:", paste(unique_values, collapse = ", ")))

# Check the data type of the month column
print(paste("Data type of the month column:", class(merged_data$month)))

# Check for missing or NA values
print(paste("Number of missing or NA values in the month column:", sum(is.na(merged_data$month))))

# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$created_month)

# Now plot with the updated data
plot_ly(data = merged_data, x = ~as.Date(month_number), y = ~subscribers, type = "scatter", mode = "lines",
        line = list(color = "rgb(255, 100, 100)")) %>%
  layout(title = "Trend of Subscribers Over Time",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Subscribers"))



```
