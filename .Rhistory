# Data validation and cleaning
# merged_data <- na.omit(merged_data)
# Define color scheme
color_scheme <- list(color = "rgba(255, 100, 100, 0.7)")
# Interactive scatterplot: Subscribers vs. Video Views
plot_ly(merged_data, x = ~subscribers, y = ~video.views, type = "scatter", mode = "markers",
text = ~Youtuber, hoverinfo = "text", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Subscribers vs. Video Views",
xaxis = list(title = "Subscribers"),
yaxis = list(title = "Video Views"))
# Interactive scatterplot: Subscribers vs. Video Views
plot_ly(merged_data, x = ~subscribers, y = ~video.views, type = "scatter", mode = "markers",
text = ~paste("Youtuber: ", Youtuber, "<br>Subscribers: ", subscribers, "<br>Video Views: ", video.views),
hoverinfo = "text", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Subscribers vs. Video Views",
xaxis = list(title = "Subscribers"),
yaxis = list(title = "Video Views"))
# Define color scheme
color_scheme <- list(color = "rgba(255, 100, 100, 0.7)")
# Interactive scatterplot: Subscribers vs. Video Views
plot_ly(merged_data, x = ~subscribers, y = ~video.views, type = "scatter", mode = "markers",
text = ~paste("Youtuber: ", Youtuber, "<br>Subscribers: ", subscribers, "<br>Video Views: ", video.views),
hoverinfo = "text", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Subscribers vs. Video Views",
xaxis = list(title = "Subscribers"),
yaxis = list(title = "Video Views"))
# Interactive bar plot: Number of uploads per category
plot_ly(merged_data, x = ~category, type = "bar", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Number of Uploads per Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Number of Uploads"))
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Interactive line plot: Trend of subscribers over time
plot_ly(data = merged_data, x = ~as.Date(paste(created_year, created_month, created_date, sep = "-")), y = ~subscribers, type = "scatter", mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
plot_ly(data = merged_data,
x = ~as.Date(paste(created_year, sprintf("%02d", created_month), sprintf("%02d", created_date), sep = "-")),
y = ~subscribers,
type = "scatter",
mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
plot_ly(data = merged_data,
x = ~as.Date(paste(created_year, sprintf("%02d", created_month), sprintf("%02d", created_date), sep = "-")),
y = ~subscribers,
type = "scatter",
mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Assuming your date components are in separate columns of a dataframe called merged_data
merged_data$full_date <- as.Date(paste(merged_data$created_year, merged_data$created_month, merged_data$created_date, sep = "-"), format = "%Y-%m-%d")
# Interactive line plot: Trend of subscribers over time
plot_ly(merged_data, x = ~full_date, y = ~subscribers, type = "scatter", mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Interactive line plot: Trend of subscribers over time
plot_ly(data = merged_data, x = ~as.Date(paste(created_year, created_month, created_date, sep = "-")), y = ~subscribers, type = "scatter", mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Interactive line plot: Trend of subscribers over time
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Test the function with multiple month abbreviations
abbrev_month_names <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
month_numbers <- abbrev_month_names_to_numbers(abbrev_month_names)
cat("Month numbers for", paste(abbrev_month_names, collapse = ", "), "are:", month_numbers, "\n")
plot_ly(data = merged_data, x = ~as.Date(month_numbers), y = ~subscribers, type = "scatter", mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$month)
# Check unique values in the month column
unique(merged_data$month)
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$month)
# Check unique values in the month column
unique(merged_data$month)
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$month)
# Interactive line plot: Trend of subscribers over time
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Test the function with multiple month abbreviations
abbrev_month_names <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
month_numbers <- abbrev_month_names_to_numbers(abbrev_month_names)
cat("Month numbers for", paste(abbrev_month_names, collapse = ", "), "are:", month_numbers, "\n")
plot_ly(data = merged_data, x = ~as.Date(month_numbers), y = ~subscribers, type = "scatter", mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Interactive line plot: Trend of subscribers over time
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Check unique values in the month column
unique_values <- unique(merged_data$month)
print(paste("Unique values in the month column:", paste(unique_values, collapse = ", ")))
# Check the data type of the month column
print(paste("Data type of the month column:", class(merged_data$month)))
# Check for missing or NA values
print(paste("Number of missing or NA values in the month column:", sum(is.na(merged_data$month))))
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$month)
# Interactive line plot: Trend of subscribers over time
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Check unique values in the month column
unique_values <- unique(merged_data$month)
print(paste("Unique values in the month column:", paste(unique_values, collapse = ", ")))
# Check the data type of the month column
print(paste("Data type of the month column:", class(merged_data$month)))
# Check for missing or NA values
print(paste("Number of missing or NA values in the month column:", sum(is.na(merged_data$month))))
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$created_month)
# Now plot with the updated data
plot_ly(data = merged_data, x = ~as.Date(month_number), y = ~subscribers, type = "scatter", mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
library(leaflet)
# Filter out rows with missing latitude or longitude
geo_data <- merged_data[!is.na(merged_data$Latitude) & !is.na(merged_data$Longitude), ]
# Clean up the Youtuber names to ensure valid UTF-8 characters
geo_data$Youtuber <- iconv(geo_data$Youtuber, from = "UTF-8", to = "ASCII//TRANSLIT")
# Create Leaflet map
map <- leaflet(geo_data) %>%
addTiles() %>%
addMarkers(~Longitude, ~Latitude, popup = ~Youtuber)
# Display the map
map
library(plotly)
# Interactive bar plot: Number of uploads per category
plot_ly(merged_data, x = ~category, type = "bar", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Number of Uploads per Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Number of Uploads"))
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Interactive line plot: Trend of subscribers over time
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Check unique values in the month column
unique_values <- unique(merged_data$month)
print(paste("Unique values in the month column:", paste(unique_values, collapse = ", ")))
# Check the data type of the month column
print(paste("Data type of the month column:", class(merged_data$month)))
# Check for missing or NA values
print(paste("Number of missing or NA values in the month column:", sum(is.na(merged_data$month))))
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$created_month)
# Now plot with the updated data
plot_ly(data = merged_data, x = ~as.Date(month_number), y = ~subscribers, type = "scatter", mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
library(plotly)
# Interactive bar plot: Number of uploads per category
plot_ly(merged_data, x = ~category, type = "bar", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Number of Uploads per Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Number of Uploads"))
library(plotly)
# Interactive bar plot: Number of uploads per category
plot_ly(merged_data, x = ~category, type = "bar", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Number of Uploads per Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Number of Uploads"))
color_scheme <- "blue"  # Replace with your actual color scheme
library(plotly)
# Assuming you have a data frame called "merged_data" with columns "category" and "uploads"
plot_ly(merged_data, x = ~category, y = ~uploads, type = "bar", marker = list(color = color_scheme), height = 400, width = 600) %>%
layout(title = "Number of Uploads per Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Number of Uploads"))
# Check the class of color_scheme
print(class(color_scheme))
# If color_scheme is not a list, convert it to a list
if (class(color_scheme) != "list") {
color_scheme <- list(color = color_scheme)
}
# Then, you can use color_scheme in your plot_ly function
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Check the class of color_scheme
print(class(color_scheme))
# If color_scheme is not a list, convert it to a list
if (class(color_scheme) != "list") {
color_scheme <- list(color = color_scheme)
}
# Then, you can use color_scheme in your plot_ly function
plot_ly(merged_data, x = ~category, y = ~Total.Views, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Check the class of color_scheme
print(class(color_scheme))
# If color_scheme is not a list, convert it to a list
if (class(color_scheme) != "list") {
color_scheme <- list(color = color_scheme)
}
# Then, you can use color_scheme in your plot_ly function
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Check the class of color_scheme
print(class(color_scheme))
# If color_scheme is not a list, convert it to a list
if (class(color_scheme) != "list") {
color_scheme <- list(color = color_scheme)
}
# Then, you can use color_scheme in your plot_ly function
plot_ly(merged_data, x = ~category, y = ~Total.Views, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "blue")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Load necessary libraries
library(plotly)
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Check unique values in the month column
unique_values <- unique(merged_data$month)
cat("Unique values in the month column:", paste(unique_values, collapse = ", "), "\n")
# Check the data type of the month column
cat("Data type of the month column:", class(merged_data$month), "\n")
# Check for missing or NA values
cat("Number of missing or NA values in the month column:", sum(is.na(merged_data$month)), "\n")
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$month)
# Now plot with the updated data
plot_ly(data = merged_data, x = ~as.Date(paste(merged_data$year, merged_data$month_number, "01", sep = "-")), y = ~subscribers, type = "scatter", mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Load necessary libraries
library(plotly)
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Check unique values in the month column
unique_values <- unique(merged_data$month)
cat("Unique values in the month column:", paste(unique_values, collapse = ", "), "\n")
# Check the data type of the month column
cat("Data type of the month column:", class(merged_data$month), "\n")
# Check for missing or NA values
cat("Number of missing or NA values in the month column:", sum(is.na(merged_data$month)), "\n")
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$month)
# Now plot with the updated data
plot_ly(data = merged_data, x = ~as.Date(paste(merged_data$year, merged_data$month_number, "01", sep = "-")), y = ~subscribers, type = "scatter", mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Load necessary libraries
library(plotly)
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Check unique values in the month column
unique_values <- unique(merged_data$month)
cat("Unique values in the month column:", ifelse(is.na(unique_values), "NA", paste(unique_values, collapse = ", ")), "\n")
# Check the data type of the month column
cat("Data type of the month column:", class(merged_data$month), "\n")
# Check for missing or NA values
cat("Number of missing or NA values in the month column:", sum(is.na(merged_data$month)), "\n")
# Handle NA values by replacing them with a default month
merged_data$month[is.na(merged_data$month)] <- "Jan"
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$month)
# Now plot with the updated data
plot_ly(data = merged_data, x = ~as.Date(paste(merged_data$year, merged_data$month_number, "01", sep = "-")), y = ~subscribers, type = "scatter", mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Load necessary libraries
library(plotly)
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Check unique values in the month column
unique_values <- unique(merged_data$month)
cat("Unique values in the month column:", ifelse(is.na(unique_values), "NA", paste(unique_values, collapse = ", ")), "\n")
# Check the data type of the month column
cat("Data type of the month column:", class(merged_data$month), "\n")
# Check for missing or NA values
cat("Number of missing or NA values in the month column:", sum(is.na(merged_data$month)), "\n")
# Handle NA values by replacing them with a default month
merged_data$month[is.na(merged_data$month)] <- "Jan"
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$month)
# Now plot with the updated data
plot_ly(data = merged_data, x = ~as.Date(paste(merged_data$year, merged_data$month_number, "01", sep = "-")), y = ~subscribers, type = "scatter", mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Load necessary libraries
library(plotly)
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Check unique values in the month column
unique_values <- unique(merged_data$month)
cat("Unique values in the month column:", ifelse(is.na(unique_values), "NA", paste(unique_values, collapse = ", ")), "\n")
# Check the data type of the month column
cat("Data type of the month column:", class(merged_data$month), "\n")
# Check for missing or NA values
cat("Number of missing or NA values in the month column:", sum(is.na(merged_data$month)), "\n")
# Handle NA values by replacing them with a default month
merged_data$month[is.na(merged_data$month)] <- "Jan"
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$month)
# Now plot with the updated data
plot_ly(data = merged_data,
x = ~as.Date(paste(as.character(merged_data$year), as.character(merged_data$month_number), "01", sep = "-")),
y = ~subscribers,
type = "scatter",
mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Load necessary libraries
library(plotly)
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Check unique values in the month column
unique_values <- unique(merged_data$month)
cat("Unique values in the month column:", ifelse(is.na(unique_values), "NA", paste(unique_values, collapse = ", ")), "\n")
# Check the data type of the month column
cat("Data type of the month column:", class(merged_data$month), "\n")
# Check for missing or NA values
cat("Number of missing or NA values in the month column:", sum(is.na(merged_data$month)), "\n")
# Handle NA values by replacing them with a default month
merged_data$month[is.na(merged_data$month)] <- "Jan"
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$month)
# Now plot with the updated data
plot_ly(data = merged_data,
x = ~as.Date(paste(as.character(merged_data$year), as.character(merged_data$month_number), "01", sep = "-")),
y = ~subscribers,
type = "scatter",
mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Load necessary libraries
library(plotly)
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Check unique values in the month column
unique_values <- unique(merged_data$month)
cat("Unique values in the month column:", ifelse(is.na(unique_values), "NA", paste(unique_values, collapse = ", ")), "\n")
# Check the data type of the month column
cat("Data type of the month column:", class(merged_data$month), "\n")
# Check for missing or NA values
cat("Number of missing or NA values in the month column:", sum(is.na(merged_data$month)), "\n")
# Handle NA values by replacing them with a default month
merged_data$month[is.na(merged_data$month)] <- "Jan"
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$month)
# Now plot with the updated data
plot_ly(data = merged_data,
x = ~as.Date(paste(as.character(merged_data$year), as.character(merged_data$month_number), "01", sep = "-")),
y = ~subscribers,
type = "scatter",
mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Load necessary libraries
library(plotly)
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Check unique values in the month column
unique_values <- unique(merged_data$month)
cat("Unique values in the month column:", ifelse(is.na(unique_values), "NA", paste(unique_values, collapse = ", ")), "\n")
# Check the data type of the month column
cat("Data type of the month column:", class(merged_data$month), "\n")
# Check for missing or NA values
cat("Number of missing or NA values in the month column:", sum(is.na(merged_data$month)), "\n")
# Handle NA values by replacing them with a default month
merged_data$month[is.na(merged_data$month)] <- "Jan"
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$month)
# Now plot with the updated data
plot_ly(data = merged_data,
x = ~as.Date(paste(as.character(merged_data$year), as.character(merged_data$month_number), "01", sep = "-"), format = "%Y-%m-%d"),
y = ~subscribers,
type = "scatter",
mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Load necessary libraries
library(plotly)
# Check data types and structure
str(merged_data)
# Check for any missing values
any_missing <- any(is.na(merged_data$year) | is.na(merged_data$month_number) | is.na(merged_data$subscribers))
if (any_missing) {
stop("There are missing values in the data. Please ensure all required columns are populated.")
}
# Now plot with the updated data
plot_ly(data = merged_data,
x = ~as.Date(paste(merged_data$year, merged_data$month_number, "01", sep = "-")),
y = ~subscribers,
type = "scatter",
mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
# Interactive line plot: Trend of subscribers over time
# Define a function to convert abbreviated month names to month numbers
abbrev_month_names_to_numbers <- function(abbrev_month_names) {
abbrev_month_names <- tolower(substr(abbrev_month_names, 1, 3))
match(abbrev_month_names, tolower(substr(month.abb, 1, 3)))
}
# Check unique values in the month column
unique_values <- unique(merged_data$month)
print(paste("Unique values in the month column:", paste(unique_values, collapse = ", ")))
# Check the data type of the month column
print(paste("Data type of the month column:", class(merged_data$month)))
# Check for missing or NA values
print(paste("Number of missing or NA values in the month column:", sum(is.na(merged_data$month))))
# Convert month names in merged_data to month numbers
merged_data$month_number <- abbrev_month_names_to_numbers(merged_data$created_month)
# Now plot with the updated data
plot_ly(data = merged_data, x = ~as.Date(month_number), y = ~subscribers, type = "scatter", mode = "lines",
line = list(color = "rgb(255, 100, 100)")) %>%
layout(title = "Trend of Subscribers Over Time",
xaxis = list(title = "Date"),
yaxis = list(title = "Subscribers"))
