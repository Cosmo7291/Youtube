# Print the plot directly
print(bar_plot)
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "blue")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) x / 1e6)  # This line converts the y-axis values to millions
# Print the plot directly
print(bar_plot)
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "pink")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
#| label: Graph of the process made by Mermaid
# Load necessary packages
suppressPackageStartupMessages(library(dplyr))
library(dplyr)
# Load datasets
global_youtube <- read.csv("global_youtube_statistics.csv")
top_artists <- read.csv("topyoutube.csv")
top_videos <- read.csv("Top 14 Ever Most Viewed YouTube Videos.csv")
# Check the structure of datasets
str(global_youtube)
str(top_artists)
str(top_videos)
# Merge datasets
# Assuming there are common variables to merge on, such as Youtuber/Artist/Channel Name
merged_data <- merge(global_youtube, top_artists, by.x = "Youtuber", by.y = "Artist", all = TRUE)
merged_data <- merge(merged_data, top_videos, by.x = "Youtuber", by.y = "Description", all = TRUE)
# Creating a Mermaid diagram
mermaid_diagram <- "
graph LR
A[global_youtube] --> C[merged_data]
B[top_artists] --> C
D[top_videos] --> C
"
# Render the Mermaid diagram
DiagrammeR::mermaid(mermaid_diagram)
# Load necessary packages
library(dplyr)
library(ggplot2)
# Assuming merged_data is already available
# If not, load or prepare your merged_data dataframe
merged_data$subscribers <- merged_data$subscribers + 1
merged_data$video.views <- merged_data$video.views + 1
# Remove rows with NA or infinite values
merged_data <- merged_data %>% filter(is.finite(subscribers), is.finite(video.views))
# Create visualizations with scaled axes
ggplot(merged_data, aes(x = subscribers, y = video.views)) +
geom_point(color = "darkblue") +
scale_x_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))) +
labs(title = "Subscribers vs Total Views",
x = "Subscribers (Log Scale)", y = "Total Views (Log Scale)") +
theme_minimal()
# Save the merged dataset if needed
write.csv(merged_data, "merged_data.csv", row.names = FALSE)
suppressWarnings(library(leaflet))
library(leaflet)
# Filter out rows with missing latitude or longitude
geo_data <- merged_data[!is.na(merged_data$Latitude) & !is.na(merged_data$Longitude), ]
# Clean up the Youtuber names to ensure valid UTF-8 characters
geo_data$Youtuber <- iconv(geo_data$Youtuber, from = "UTF-8", to = "ASCII//TRANSLIT")
# Create Leaflet map
map <- leaflet(geo_data) %>%
addTiles() %>%
addMarkers(~Longitude, ~Latitude, popup = ~Youtuber)
# Display the map
map
suppressWarnings(suppressPackageStartupMessages(library(plotly)))
library(plotly)
color_scheme <- "blue"  # Replace with your actual color scheme
# Assuming you have a data frame called "merged_data" with columns "category" and "uploads"
plot_ly(merged_data, x = ~category, y = ~uploads, type = "bar", marker = list(color = color_scheme), height = 400, width = 600) %>%
layout(title = "Number of Uploads per Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Number of Uploads"))
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) x / 1e6)  # This line converts the y-axis values to millions
# Print the plot directly
print(bar_plot)
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "pink")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "purple")
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) round(x / 1e6))  # This line converts the y-axis values to millions and rounds them to the nearest whole number
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) as.integer(round(x / 1e6)))  # This line converts the y-axis values to millions, rounds them to the nearest whole number, and then converts them to integers
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "darkcyan") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) as.integer(round(x / 1e6)))  # This line converts the y-axis values to millions, rounds them to the nearest whole number, and then converts them to integers
# Convert the ggplot2 plot to an interactive plotly plot
interactive_plot <- ggplotly(bar_plot)
# Print the interactive plot directly
print(interactive_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "darkcyan") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) as.integer(round(x / 1e6)))  # This line converts the y-axis values to millions, rounds them to the nearest whole number, and then converts them to integers
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "darkcyan") +
geom_text(aes(label = video.views), vjust = -0.3) +  # This line adds the labels
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) as.integer(round(x / 1e6)))  # This line converts the y-axis values to millions, rounds them to the nearest whole number, and then converts them to integers
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "darkcyan") +
geom_text(aes(label = paste0(round(video.views / 1e6, 1), "m")), vjust = -0.3) +  # This line adds the labels in millions with "m" suffix
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) as.integer(round(x / 1e6)))  # This line converts the y-axis values to millions, rounds them to the nearest whole number, and then converts them to integers
# Convert the ggplot2 plot to an interactive plotly plot
interactive_plot <- ggplotly(bar_plot)
# Print the interactive plot directly
print(interactive_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "darkcyan") +
geom_text(aes(label = paste0(round(video.views / 1e6, 1), "m")), vjust = -0.6) +  # This line adds the labels in millions with "m" suffix
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) as.integer(round(x / 1e6)))  # This line converts the y-axis values to millions, rounds them to the nearest whole number, and then converts them to integers
# Convert the ggplot2 plot to an interactive plotly plot
interactive_plot <- ggplotly(bar_plot)
# Print the interactive plot directly
print(interactive_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "darkcyan") +
geom_text(aes(label = video.views), vjust = -0.3) +  # This line adds the labels
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) as.integer(round(x / 1e6)))  # This line converts the y-axis values to millions, rounds them to the nearest whole number, and then converts them to integers
# Print the plot directly
print(bar_plot)
# Sample data (replace with your actual data)
youtubers <- c("Youtuber1", "Youtuber2", "Youtuber3", "Youtuber4", "Youtuber5", "Youtuber6", "Youtuber7", "Youtuber8", "Youtuber9", "Youtuber10")
views <- c(100000000, 90000000, 80000000, 70000000, 60000000, 50000000, 40000000, 30000000, 20000000, 10000000)
# Create a DataFrame
df <- data.frame(Youtuber = youtubers, video.views = views)
# Sort by views in descending order
df <- df[order(df$video.views, decreasing = TRUE), ]
# Create a bar plot
library(ggplot2)
library(scales)  # For formatting y-axis labels
ggplot(df, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "darkcyan") +
geom_text(aes(label = comma(video.views)), vjust = -0.3) +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = comma_format(scale = 1e-6))  # Convert y-axis values to millions
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "darkcyan") +
geom_text(aes(label = video.views), vjust = -4.3) +  # This line adds the labels
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) as.integer(round(x / 1e6)))  # This line converts the y-axis values to millions, rounds them to the nearest whole number, and then converts them to integers
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "darkcyan") +
geom_text(aes(label = video.views), vjust = -0.3) +  # This line adds the labels
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) as.integer(round(x / 1e6)))  # This line converts the y-axis values to millions, rounds them to the nearest whole number, and then converts them to integers
# Print the plot directly
print(bar_plot)
# Qualitative Analysis (Text Mining / Thematic Analysis)
# Combine video titles into a single text corpus
corpus <- Corpus(VectorSource(merged_data$Title))
#| label: Graph of the process made by Mermaid
# Load necessary packages
suppressPackageStartupMessages(library(dplyr))
library(dplyr)
# Load datasets
global_youtube <- read.csv("global_youtube_statistics.csv")
top_artists <- read.csv("topyoutube.csv")
top_videos <- read.csv("Top 14 Ever Most Viewed YouTube Videos.csv")
# Check the structure of datasets
str(global_youtube)
str(top_artists)
str(top_videos)
# Merge datasets
# Assuming there are common variables to merge on, such as Youtuber/Artist/Channel Name
merged_data <- merge(global_youtube, top_artists, by.x = "Youtuber", by.y = "Artist", all = TRUE)
merged_data <- merge(merged_data, top_videos, by.x = "Youtuber", by.y = "Description", all = TRUE)
# Creating a Mermaid diagram
mermaid_diagram <- "
graph LR
A[global_youtube] --> C[merged_data]
B[top_artists] --> C
D[top_videos] --> C
"
# Render the Mermaid diagram
DiagrammeR::mermaid(mermaid_diagram)
# Load necessary packages
library(dplyr)
library(ggplot2)
# Assuming merged_data is already available
# If not, load or prepare your merged_data dataframe
merged_data$subscribers <- merged_data$subscribers + 1
merged_data$video.views <- merged_data$video.views + 1
# Remove rows with NA or infinite values
merged_data <- merged_data %>% filter(is.finite(subscribers), is.finite(video.views))
# Create visualizations with scaled axes
ggplot(merged_data, aes(x = subscribers, y = video.views)) +
geom_point(color = "darkblue") +
scale_x_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))) +
labs(title = "Subscribers vs Total Views",
x = "Subscribers (Log Scale)", y = "Total Views (Log Scale)") +
theme_minimal()
# Save the merged dataset if needed
write.csv(merged_data, "merged_data.csv", row.names = FALSE)
suppressWarnings(library(leaflet))
library(leaflet)
# Filter out rows with missing latitude or longitude
geo_data <- merged_data[!is.na(merged_data$Latitude) & !is.na(merged_data$Longitude), ]
# Clean up the Youtuber names to ensure valid UTF-8 characters
geo_data$Youtuber <- iconv(geo_data$Youtuber, from = "UTF-8", to = "ASCII//TRANSLIT")
# Create Leaflet map
map <- leaflet(geo_data) %>%
addTiles() %>%
addMarkers(~Longitude, ~Latitude, popup = ~Youtuber)
# Display the map
map
suppressWarnings(suppressPackageStartupMessages(library(plotly)))
library(plotly)
color_scheme <- "blue"  # Replace with your actual color scheme
# Assuming you have a data frame called "merged_data" with columns "category" and "uploads"
plot_ly(merged_data, x = ~category, y = ~uploads, type = "bar", marker = list(color = color_scheme), height = 400, width = 600) %>%
layout(title = "Number of Uploads per Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Number of Uploads"))
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "darkcyan") +
geom_text(aes(label = video.views), vjust = -0.3) +  # This line adds the labels
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = function(x) as.integer(round(x / 1e6)))  # This line converts the y-axis values to millions, rounds them to the nearest whole number, and then converts them to integers
# Print the plot directly
print(bar_plot)
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "purple")
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Load necessary libraries
suppressWarnings(suppressPackageStartupMessages(library(tidyr)))
suppressWarnings(suppressPackageStartupMessages(library(tm)))
library(dplyr)
library(tidyr)
library(ggplot2)
library(tm)
library(stringi)
# Load the dataset
merged_data <- read.csv("merged_data.csv")
# Drop unnecessary columns
merged_data <- merged_data %>%
select(-c(Total.Views, X100M, Avg, Video.Name, Channel_Name, Views, Likes, Uploading.Date, Duration))
# Quantitative Analysis (Regression Model)
# Build a regression model to predict video views
model <- lm(video.views ~ subscribers + uploads + Population + Unemployment.rate + Urban_population, data = merged_data)
# Summary of the regression model
summary(model)
# Visualize the regression model
plot(model)
# Qualitative Analysis (Text Mining / Thematic Analysis)
# Combine video titles into a single text corpus
corpus <- Corpus(VectorSource(merged_data$Title))
# Convert the text data to "UTF-8" encoding
suppressWarnings({
corpus <- tm_map(corpus, content_transformer(function(x) iconv(x, to = "UTF-8")))
})
# Preprocess the text data
suppressWarnings({
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
})
# Create a document-term matrix
dtm <- DocumentTermMatrix(corpus)
# Find the most frequent terms
term_freq <- colSums(as.matrix(dtm))
top_terms <- sort(term_freq, decreasing = TRUE)[1:10]
# Display the top terms
print(top_terms)
# Visualize the top terms
barplot(top_terms, main = "Top Terms", ylab = "Frequency", las = 2, col = "lightblue")
# Qualitative Analysis (Text Mining / Thematic Analysis)
# Combine video titles into a single text corpus
corpus <- Corpus(VectorSource(merged_data$Title))
# Convert the text data to "UTF-8" encoding
suppressWarnings({
corpus <- tm_map(corpus, content_transformer(function(x) iconv(x, to = "UTF-8")))
})
# Preprocess the text data
suppressWarnings({
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
})
# Create a document-term matrix
dtm <- DocumentTermMatrix(corpus)
# Find the most frequent terms
term_freq <- colSums(as.matrix(dtm))
top_terms <- sort(term_freq, decreasing = TRUE)[1:10]
# Display the top terms
print(top_terms)
# Visualize the top terms
barplot(top_terms, main = "Top Terms", ylab = "Frequency", las = 2, col = "orange")
suppressWarnings(library(leaflet))
library(leaflet)
# Filter out rows with missing latitude or longitude
geo_data <- merged_data[!is.na(merged_data$Latitude) & !is.na(merged_data$Longitude), ]
# Clean up the Youtuber names to ensure valid UTF-8 characters
geo_data$Youtuber <- iconv(geo_data$Youtuber, from = "UTF-8", to = "ASCII//TRANSLIT")
# Create Leaflet map
map <- leaflet(geo_data) %>%
addTiles() %>%
addMarkers(~Longitude, ~Latitude, popup = ~Youtuber)
# Display the map
map
