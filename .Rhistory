# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks=seq(0,max(top_10_youtubers$video.views),by=5e+10)) # Added this line to fix y axis
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::scientific_format())  # Added this line to fix y axis
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::scientific_format())  # Added this line to fix y axis
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Convert the ggplot2 plot to an interactive plotly plot
interactive_plot <- ggplotly(bar_plot)
# Print the plot directly
print(interactive_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)")
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Convert the ggplot2 plot to an interactive plotly plot
interactive_plot <- ggplotly(bar_plot)
# Print the plot directly
print(interactive_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)")  +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Convert the ggplot2 plot to an interactive plotly plot
interactive_plot <- ggplotly(bar_plot)
# Print the plot directly
print(interactive_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6))
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # in millions
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Convert the ggplot2 plot to an interactive plotly plot
interactive_plot <- ggplotly(bar_plot)
# Print the plot directly
print(interactive_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Convert the ggplot2 plot to an interactive plotly plot
interactive_plot <- ggplotly(bar_plot)
# Print the plot directly
print(interactive_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6))
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = paste0(round(video.views / 1e6, 1), "M")), vjust = -0.3) +  # Add labels on top of bars
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Print the plot directly
print(bar_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = paste0(round(video.views / 1e6, 1), "M")), vjust = -0.3) +  # Add labels on top of bars
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Convert the ggplot object to a plotly object to make it interactive
interactive_plot <- ggplotly(bar_plot)
# Print the interactive plot
print(interactive_plot)
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = paste0(round(video.views / 1e6, 1), "M")), vjust = -0.3) +  # Add labels on top of bars
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Convert the ggplot object to a plotly object to make it interactive
interactive_plot <- ggplotly(bar_plot, tooltip = "text")  # Set tooltip to "text" to only show the text from geom_text
# Print the interactive plot
print(interactive_plot)
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "blue")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = paste0(round(video.views / 1e6, 1), "M")), vjust = -0.3) +  # Add labels on top of bars
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Print the plot directly
print(bar_plot)
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
library(scales)  # for label formatting
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views / 1e6)) +  # Divide by 1e6 to convert to millions
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views (in millions)") +  # Update y-axis label
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)  # Use comma formatting for y-axis labels
# Print the plot directly
print(bar_plot)
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "pink")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "blue")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot directly
print(bar_plot)
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "blue")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "blue")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "blue")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "blue")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = total.views, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "blue")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = Views , type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
# Assuming color_scheme is defined elsewhere as a list
color_scheme <- list(color = "blue")  # Example color scheme, replace with your actual color scheme
# Interactive box plot: Distribution of total views by category
plot_ly(merged_data, x = ~category, y = ~X100M, type = "box", marker = color_scheme, height = 400, width = 600) %>%
layout(title = "Distribution of Total Views by Category",
xaxis = list(title = "Category"),
yaxis = list(title = "Total Views"))
