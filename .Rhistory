merged_data <- read.csv("merged_data.csv")
# Drop unnecessary columns
merged_data <- merged_data %>%
select(-c(Total.Views, X100M, Avg, Video.Name, Channel_Name, Views, Likes, Uploading.Date, Duration))
# Quantitative Analysis (Regression Models)
# Build a regression model to predict video views
model <- lm(video.views ~ subscribers + uploads + Population + Unemployment.rate + Urban_population, data = merged_data)
# Summary of the regression model
summary(model)
# Qualitative Analysis (Text Mining / Thematic Analysis)
# Combine video titles into a single text corpus
corpus <- Corpus(VectorSource(merged_data$Title))
# Preprocess the text data
corpus <- tm_map(corpus, content_transformer(tolower))
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(tm)
# Load the dataset
merged_data <- read.csv("merged_data.csv")
# Drop unnecessary columns
merged_data <- merged_data %>%
select(-c(Total.Views, X100M, Avg, Video.Name, Channel_Name, Views, Likes, Uploading.Date, Duration))
# Quantitative Analysis (Regression Models)
# Build a regression model to predict video views
model <- lm(video.views ~ subscribers + uploads + Population + Unemployment.rate + Urban_population, data = merged_data)
# Summary of the regression model
summary(model)
# Qualitative Analysis (Text Mining / Thematic Analysis)
# Combine video titles into a single text corpus
corpus <- Corpus(VectorSource(merged_data$Title))
# Convert the text data to "UTF-8" encoding
corpus <- tm_map(corpus, content_transformer(function(x) iconv(x, to = "UTF-8")))
# Preprocess the text data
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
# Create a document-term matrix
dtm <- DocumentTermMatrix(corpus)
# Find the most frequent terms
term_freq <- colSums(as.matrix(dtm))
top_terms <- sort(term_freq, decreasing = TRUE)[1:10]
# Display the top terms
print(top_terms)
# Conclusion
# The regression analysis suggests that variables such as subscribers, uploads, population, unemployment rate, and urban population have significant effects on video views on YouTube channels.
# Thematic analysis based on the most frequent terms in video titles provides insights into popular topics or themes that might attract viewers.
# Further analysis and interpretation specific to your dataset and research question can be performed based on the results obtained from quantitative and qualitative analysis.
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(tm)
library(stringi)
# Load the dataset
merged_data <- read.csv("merged_data.csv")
# Drop unnecessary columns
merged_data <- merged_data %>%
select(-c(Total.Views, X100M, Avg, Video.Name, Channel_Name, Views, Likes, Uploading.Date, Duration))
# Quantitative Analysis (Regression Models)
# Build a regression model to predict video views
model <- lm(video.views ~ subscribers + uploads + Population + Unemployment.rate + Urban_population, data = merged_data)
# Summary of the regression model
summary(model)
# Visualize the regression model
plot(model)
# Qualitative Analysis (Text Mining / Thematic Analysis)
# Combine video titles into a single text corpus
corpus <- Corpus(VectorSource(merged_data$Title))
# Convert the text data to "UTF-8" encoding
corpus <- tm_map(corpus, content_transformer(function(x) iconv(x, to = "UTF-8")))
# Preprocess the text data
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
# Create a document-term matrix
dtm <- DocumentTermMatrix(corpus)
# Find the most frequent terms
term_freq <- colSums(as.matrix(dtm))
top_terms <- sort(term_freq, decreasing = TRUE)[1:10]
# Display the top terms
print(top_terms)
# Visualize the top terms
barplot(top_terms, main = "Top Terms", ylab = "Frequency", las = 2, col = "lightblue")
# Conclusion
# The regression analysis suggests that variables such as subscribers, uploads, population, unemployment rate, and urban population have significant effects on video views on YouTube channels.
# Thematic analysis based on the most frequent terms in video titles provides insights into popular topics or themes that might attract viewers.
# Further analysis and interpretation specific to your dataset and research question can be performed based on the results obtained from quantitative and qualitative analysis.
# Load necessary libraries
library(ggplot2)
# Create hypothetical data
data <- data.frame(
Youtuber = c('Youtuber1', 'Youtuber2', 'Youtuber3', 'Youtuber4', 'Youtuber5'),
Rank = c(1, 2, 3, 4, 5),
Highest_monthly_earnings = c(50000, 45000, 40000, 38000, 35000),
Lowest_monthly_earnings = c(20000, 18000, 15000, 12000, 10000)
)
# Plotting
ggplot(data, aes(x = Rank)) +
geom_line(aes(y = Highest_monthly_earnings), color = "blue", linetype = "solid", size = 1.5) +
geom_point(aes(y = Highest_monthly_earnings), color = "blue", size = 3) +
geom_line(aes(y = Lowest_monthly_earnings), color = "red", linetype = "solid", size = 1.5) +
geom_point(aes(y = Lowest_monthly_earnings), color = "red", size = 3) +
labs(title = "Top 5 Youtubers: Highest and Lowest Monthly Earnings",
x = "Rank",
y = "Earnings") +
theme_minimal()
# Load necessary libraries
library(plotly)
# Create hypothetical data
data <- data.frame(
Youtuber = c('Youtuber1', 'Youtuber2', 'Youtuber3', 'Youtuber4', 'Youtuber5'),
Rank = c(1, 2, 3, 4, 5),
Highest_monthly_earnings = c(50000, 45000, 40000, 38000, 35000),
Lowest_monthly_earnings = c(20000, 18000, 15000, 12000, 10000)
)
# Plotting
plot_ly(data, x = ~Rank, y = ~Highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Youtuber: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~Lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Youtuber: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings')) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Load necessary libraries
library(plotly)
# Create hypothetical data
data <- data.frame(
Youtuber = c('Youtuber1', 'Youtuber2', 'Youtuber3', 'Youtuber4', 'Youtuber5'),
Channel_Name = c('Channel1', 'Channel2', 'Channel3', 'Channel4', 'Channel5'),
Rank = c(1, 2, 3, 4, 5),
Highest_monthly_earnings = c(50000, 45000, 40000, 38000, 35000),
Lowest_monthly_earnings = c(20000, 18000, 15000, 12000, 10000)
)
# Plotting
plot_ly(data, x = ~Rank, y = ~Highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Channel_Name, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~Lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Channel_Name, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = data$Rank, ticktext = data$Channel_Name)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Load necessary libraries
library(plotly)
# Create hypothetical data
data <- data.frame(
Youtuber = c('T-Series', 'PewDiePie', 'Cocomelon - Nursery Rhymes', 'SET India', 'Like Nastya'),
Rank = c(1, 2, 3, 4, 5),
Highest_monthly_earnings = c(50000, 45000, 40000, 38000, 35000),
Lowest_monthly_earnings = c(20000, 18000, 15000, 12000, 10000)
)
# Plotting
plot_ly(data, x = ~Rank, y = ~Highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~Lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = data$Rank, ticktext = data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'Rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$Rank),]
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~Rank, y = ~Highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~Lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~Highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~Lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~Lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~Lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~Lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~Lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~Lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~Lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings)) %>%
add_trace(y = ~lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', Lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', highest_monthly_earnings)) %>%
add_trace(y = ~lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
a <- iconv(a, to = "ASCII//TRANSLIT")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
Sys.setlocale("LC_ALL", "en_US.UTF-8")
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', highest_monthly_earnings)) %>%
add_trace(y = ~lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
merged_data <- iconv(a, to = "ASCII//TRANSLIT")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
a <- iconv(a, to = "ASCII//TRANSLIT")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank
merged_data <- merged_data[order(merged_data$rank),]
# Plotting
merged_data$Youtuber <- iconv(merged_data$Youtuber, to = "ASCII//TRANSLIT")
Sys.setlocale("LC_ALL", "en_US.UTF-8")
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', highest_monthly_earnings)) %>%
add_trace(y = ~lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'Rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank and select the top 5
merged_data <- merged_data[order(merged_data$Rank),]
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'Rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank and select the top 5
merged_data <- merged_data[order(merged_data$Rank),]
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'Rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank and select the top 5
merged_data <- merged_data[order(merged_data$Rank),]
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'Rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank and select the top 5
merged_data <- merged_data[order(merged_data$rank),]
merged_data <- head(merged_data, 5)
# Plotting
plot_ly(merged_data, x = ~Rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', highest_monthly_earnings)) %>%
add_trace(y = ~lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'Rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank and select the top 5
merged_data <- merged_data[order(merged_data$rank),]
merged_data <- head(merged_data, 5)
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', highest_monthly_earnings)) %>%
add_trace(y = ~lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', lowest_monthly_earnings)) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Assuming merged_data is your data frame and it has columns 'Youtuber', 'Rank', 'Highest_monthly_earnings', 'Lowest_monthly_earnings'
# Sort the data by Rank and select the top 5
merged_data <- merged_data[order(merged_data$rank),]
merged_data <- head(merged_data, 5)
# Convert earnings to a more readable format (in millions)
merged_data$Highest_monthly_earnings <- merged_data$highest_monthly_earnings / 1e6
merged_data$Lowest_monthly_earnings <- merged_data$lowest_monthly_earnings / 1e6
# Plotting
plot_ly(merged_data, x = ~rank, y = ~highest_monthly_earnings, type = 'scatter', mode = 'lines+markers', name = 'Highest Earnings', marker = list(color = 'blue'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Highest Earnings: $', Highest_monthly_earnings, 'M')) %>%
add_trace(y = ~lowest_monthly_earnings, name = 'Lowest Earnings', marker = list(color = 'red'), hoverinfo = 'text', text = ~paste('Channel: ', Youtuber, '<br>Lowest Earnings: $', lowest_monthly_earnings, 'M')) %>%
layout(title = 'Top 5 Youtubers: Highest and Lowest Monthly Earnings (in Millions)',
xaxis = list(title = 'Rank'),
yaxis = list(title = 'Earnings (in Millions)', tickmode = "array", tickvals = merged_data$Rank, ticktext = merged_data$Youtuber)) %>%
highlight(on = "plotly_hover", off = "plotly_doubleclick")
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(tm)
library(stringi)
# Load the dataset
merged_data <- read.csv("merged_data.csv")
# Drop unnecessary columns
merged_data <- merged_data %>%
select(-c(Total.Views, X100M, Avg, Video.Name, Channel_Name, Views, Likes, Uploading.Date, Duration))
# Quantitative Analysis (Regression Model)
# Build a regression model to predict video views
model <- lm(video.views ~ subscribers + uploads + Population + Unemployment.rate + Urban_population, data = merged_data)
# Summary of the regression model
summary(model)
# Visualize the regression model
plot(model)
# Qualitative Analysis (Text Mining / Thematic Analysis)
# Combine video titles into a single text corpus
corpus <- Corpus(VectorSource(merged_data$Title))
# Convert the text data to "UTF-8" encoding
corpus <- tm_map(corpus, content_transformer(function(x) iconv(x, to = "UTF-8")))
# Preprocess the text data
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stripWhitespace)
# Create a document-term matrix
dtm <- DocumentTermMatrix(corpus)
# Find the most frequent terms
term_freq <- colSums(as.matrix(dtm))
top_terms <- sort(term_freq, decreasing = TRUE)[1:10]
# Display the top terms
print(top_terms)
# Visualize the top terms
barplot(top_terms, main = "Top Terms", ylab = "Frequency", las = 2, col = "lightblue")
# Load required libraries
library(dplyr)
library(ggplot2)
library(tm)
# Read the data with specified encoding
combined_data <- read.csv("merged_data.csv", encoding = "UTF-8")
combined_data <- read.csv("merged_data.csv", encoding = "latin1")
# Check data read-in
str(combined_data)
# Display the first few rows of the data
head(combined_data)
# Quantitative Analysis (Regression Model)
# For demonstration purposes, let's build a GLM to predict subscribers based on video views and uploads
glm_model <- glm(subscribers ~ video.views + uploads, data = combined_data, family = poisson)
# Summary of the regression model
summary(glm_model)
# Qualitative Analysis (Text Mining / Thematic Analysis)
# Preprocess text data
corpus <- Corpus(VectorSource(combined_data$Title))
# Perform text preprocessing
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
corpus <- tm_map(corpus, stemDocument)
# Convert corpus to a document-term matrix
dtm <- DocumentTermMatrix(corpus)
# Perform thematic analysis using hierarchical clustering
dist_matrix <- dist(dtm)
clusters <- hclust(dist_matrix)
# Plot hierarchical clustering dendrogram
plot(clusters, hang = -1, cex = 0.8, main = "Hierarchical Clustering of Titles")
# Clustered Heatmap Visualization
library(pheatmap)
# Calculate similarity matrix
similarity_matrix <- as.matrix(dtm) %*% t(as.matrix(dtm))
# Create heatmap
pheatmap(similarity_matrix, clustering_method = "complete", main = "Clustered Heatmap of Titles")
# Load required libraries
library(dplyr)
library(ggplot2)
library(tm)
# Read the data with specified encoding
combined_data <- read.csv("merged_data.csv", encoding = "UTF-8")
combined_data <- read.csv("merged_data.csv", encoding = "latin1")
# Check data read-in
str(combined_data)
# Display the first few rows of the data
head(combined_data)
# Quantitative Analysis (Regression Model)
# For demonstration purposes, let's build a GLM to predict subscribers based on video views and uploads
glm_model <- glm(subscribers ~ video.views + uploads, data = combined_data, family = poisson)
# Summary of the regression model
summary(glm_model)
# Qualitative Analysis (Text Mining / Thematic Analysis)
# Preprocess text data
corpus <- Corpus(VectorSource(combined_data$Title))
# Perform text preprocessing
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
corpus <- tm_map(corpus, stemDocument)
# Convert corpus to a document-term matrix
dtm <- DocumentTermMatrix(corpus)
# Perform thematic analysis using hierarchical clustering
dist_matrix <- dist(dtm)
clusters <- hclust(dist_matrix)
# Plot hierarchical clustering dendrogram
plot(clusters, hang = -1, cex = 0.8, main = "Hierarchical Clustering of Titles")
# Set the locale explicitly
Sys.setlocale(category = "LC_ALL", locale = "C")
# Load required packages
library(ggplot2)
library(plotly)
# Assuming your data frame is named 'merged_data'
# Filter top 10 YouTubers based on views
top_10_youtubers <- merged_data[order(merged_data$video.views, decreasing = TRUE), ][1:10, ]
# Create a bar plot using ggplot2
bar_plot <- ggplot(top_10_youtubers, aes(x = reorder(Youtuber, video.views), y = video.views)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Top 10 YouTubers by Views",
x = "YouTuber",
y = "Views") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot directly
print(bar_plot)
